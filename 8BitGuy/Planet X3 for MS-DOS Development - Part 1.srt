1
00:00:11,600 --> 00:00:13,740
大家好，欢迎观看新一期的8-Bit Guy。

2
00:00:13,740 --> 00:00:18,850
你们大部分人现在已经知道我花了2017年的大部分空余时间来制作

3
00:00:18,850 --> 00:00:21,759
在Commodore 64平台适配的Planet X2电脑游戏。

4
00:00:21,759 --> 00:00:26,839
现在，很多人对我为什么等了那么久才把它告诉别人感到困惑。

5
00:00:26,839 --> 00:00:30,670
其实原因是因为我害怕人们不知道这游戏是

6
00:00:30,670 --> 00:00:34,230
讲什么的，所以我就编了一些代码然后我会想，口恩，我应该

7
00:00:34,230 --> 00:00:35,990
把它展示给大家了。

8
00:00:35,990 --> 00:00:39,430
之后我会想，不行，大家应该并不明白所以就让我再给它完成

9
00:00:39,430 --> 00:00:43,030
一个功能，然后我就会给大家展示这个了。

10
00:00:43,030 --> 00:00:48,090
当然，当我完成了那个功能后我就会倒回去，也许应该再完成一个。

11
00:00:48,090 --> 00:00:51,220
然后我只是一遍又一遍地重复着这个死循环，直到我知道了我

12
00:00:51,220 --> 00:00:54,670
都快把这个游戏给写完了然后在那个时候，你明白的，我觉得自己就

13
00:00:54,670 --> 00:00:56,941
快把这个游戏写完了，所以我就先把它完成吧，

14
00:00:56,941 --> 00:00:59,210
然后就是这样了。

15
00:00:59,210 --> 00:01:04,130
然而，不少人说他们会很乐意看到更详细的我在整个

16
00:01:04,130 --> 00:01:06,800
游戏的制作过程中面临的挑战，

17
00:01:06,800 --> 00:01:08,830
然后这就是我要在这个时候做的了。

18
00:01:08,831 --> 00:01:11,000
（选择一个平台）

19
00:01:11,000 --> 00:01:15,960
我在2017年11月9号完成了最后一段代码的编写，

20
00:01:15,960 --> 00:01:19,850
然后到了11月10号，我立即开始考虑续作了。

21
00:01:19,850 --> 00:01:24,499
首先，我甚至没想好游戏要适配哪一个电脑平台，

22
00:01:24,499 --> 00:01:27,250
但是我知道我想要一个拥有更多内存的平台。

23
00:01:27,250 --> 00:01:32,229
因为在C64版，我面临的主要问题其实只是内存根本

24
00:01:32,229 --> 00:01:36,179
装不下我最初设想的那么多功能。

25
00:01:36,179 --> 00:01:40,530
我在我的Facebook页面上做了一个调查，发现绝大多数人希望我把它

26
00:01:40,530 --> 00:01:42,650
移植到MS-DOS上。

27
00:01:42,650 --> 00:01:45,560
当然，新的问题接踵而至。

28
00:01:45,560 --> 00:01:50,670
你看，如果你看C64的话，这足足生产了12年，

29
00:01:50,670 --> 00:01:53,950
然后在这12年，它几乎就没啥变化。
（字幕菌在此时瞅了瞅英特尔）

30
00:01:53,950 --> 00:01:59,789
它们都有相同的64KB内存，相同的显示芯片，
相同的音效芯片，然后几乎什么都没有变。

31
00:01:59,789 --> 00:02:06,369
另一方面，MS-DOS从1981年开始，
搭配IBM PC 5150，拥有主频4.77MHz

32
00:02:06,369 --> 00:02:11,650
的CPU，16KB（或者64KB）内存，然后有一张CGA显示卡。

33
00:02:11,650 --> 00:02:16,530
但是在接下来的15年里，架构不断改善所以MS-DOS游戏

34
00:02:16,530 --> 00:02:17,549
也就在那个时候被制作。

35
00:02:17,549 --> 00:02:22,299
我喜欢把它分作3个时期，尽管实际上并没有分界线，

36
00:02:22,299 --> 00:02:24,519
因为它实际上是逐渐变化的。

37
00:02:24,519 --> 00:02:28,709
不过，那个问题依然存在，我想适配哪些平台呢？

38
00:02:28,709 --> 00:02:33,400
在整个DOS电脑的时代，你有很多的显卡可以选择，包括

39
00:02:33,400 --> 00:02:37,280
CGA、Tandy、Hercules、EGA、VGA、以及SVGA。

40
00:02:37,280 --> 00:02:39,980
所以，我考虑这个问题有一段时间了。

41
00:02:39,980 --> 00:02:44,670
所以我又进行了一次调查，问哪种图形模式最重要，

42
00:02:44,670 --> 00:02:48,690
然后你可以看到VGA远超其他要求的图形模式。

43
00:02:48,690 --> 00:02:52,830
尽管如此，我还是不确定这是否是我最后要选择的。

44
00:02:52,830 --> 00:02:57,560
有一件事是， MS-DOS已经有不少即时战略游戏（RTS）了，

45
00:02:57,560 --> 00:03:03,140
例如《命令与征服》、《沙丘2》，当然还有《魔兽争霸》，

46
00:03:03,140 --> 00:03:05,360
这些游戏都是90年代发布的。

47
00:03:05,360 --> 00:03:09,599
然后如果你看这些游戏的配置要求，所有的游戏都要求

48
00:03:09,599 --> 00:03:13,439
VGA显卡然后通常要求386或486 CPU。

49
00:03:13,439 --> 00:03:19,110
有一件事我很确定，如果我遵循与Commodore 64版本

50
00:03:19,110 --> 00:03:23,110
完全相同的设计概念，那么应该没有理由说我的游戏

51
00:03:23,110 --> 00:03:25,810
即使是最慢的MS-DOS计算机也没法运行。

52
00:03:25,810 --> 00:03:31,370
不仅如此，如果只支持VGA的话，那么我也会和其他RTS游戏

53
00:03:31,370 --> 00:03:36,599
进行竞争然后我肯定没办法在这场竞争里胜利因为

54
00:03:36,599 --> 00:03:38,739
那些游戏是整整一个团队的人来设计的。

55
00:03:38,739 --> 00:03:42,959
我只是一个人加上也许你知道的，一个艺术家和一个音乐家。

56
00:03:42,959 --> 00:03:49,510
我决定我的最基本平台是这台Tandy 1000EX，1986年发布。

57
00:03:49,510 --> 00:03:52,950
让我们看看它的配置吧。

58
00:03:52,950 --> 00:03:56,440
CPU的频率是7.16MHz，

59
00:03:56,440 --> 00:03:59,900
内存令人印象深刻，足足256KB，

60
00:03:59,900 --> 00:04:05,800
至于图形模式，它支持传统的CGA图形模式，
以及它自己特殊的Tandy模式。

61
00:04:05,800 --> 00:04:07,650
硬盘？想多了，不存在的。

62
00:04:07,650 --> 00:04:13,239
但是作为替代，在EX型有一个360KB软驱然后HX型的是720KB软驱。

63
00:04:13,239 --> 00:04:18,390
现在当我说这是我的目标平台时，不要以为游戏不能在

64
00:04:18,390 --> 00:04:23,509
更好或更快的MS-DOS机器上运行，因为实际上我打算支持

65
00:04:23,509 --> 00:04:27,110
各种各样的显卡、声卡和CPU等。

66
00:04:27,110 --> 00:04:30,740
当然我不可能支持世界上所有的硬件（例如1080Ti？）
那是因为我需要给每一个

67
00:04:30,740 --> 00:04:34,570
支持的显示模式不仅仅是写代码来支持，还需要

68
00:04:34,570 --> 00:04:39,810
制作支持这个图形模式的美工等等一切。

69
00:04:39,810 --> 00:04:42,800
所以我下定决心砍了Hercules显卡，
（AB钙大刀部既视感）

70
00:04:42,800 --> 00:04:46,620
我怀疑现在还有很多计算机使用这个显卡。

71
00:04:46,620 --> 00:04:48,000
然后EGA和VGA的话……

72
00:04:48,000 --> 00:04:49,699
我不想同时支持两个，

73
00:04:49,699 --> 00:04:52,500
我想我应该支持这个或另一个。

74
00:04:52,500 --> 00:04:56,400
诚实点说， 我觉得16色对我做的这类游戏而言就足够了

75
00:04:56,400 --> 00:05:00,979
当然所有的VGA系统都向下兼容EGA，所以这代表着

76
00:05:00,979 --> 00:05:03,039
有不少系统都支持它。

77
00:05:03,039 --> 00:05:06,510
但说实话，现在EGA系统真的不怎么常见了，

78
00:05:06,510 --> 00:05:10,069
实际上笔记本电脑本质上从来就没支持过EGA，

79
00:05:10,069 --> 00:05:13,630
笔记本电脑似乎是从CGA直接跳到了VGA，

80
00:05:13,630 --> 00:05:17,500
因为某个原因，它们直接跳过了整个EGA。

81
00:05:17,500 --> 00:05:20,460
我到现在都没见到一个支持EGA的笔记本，所以

82
00:05:20,460 --> 00:05:23,330
我认为应该有一些支持的但是真的相当少见。

83
00:05:23,330 --> 00:05:28,090
另一件事是，我认为大多数有EGA显卡的台式机最终可能都升级

84
00:05:28,090 --> 00:05:32,080
到VGA了，所以我不认为有很多笔记本或台式机

85
00:05:32,080 --> 00:05:34,729
仍在使用EGA。

86
00:05:34,729 --> 00:05:37,050
另一个决定因素是编程较为容易。

87
00:05:37,050 --> 00:05:42,790
事实证明EGA在后面编程的时候会极其痛苦，相对而言

88
00:05:42,790 --> 00:05:47,040
VGA就省事的多所以我认为从编程的角度来看，

89
00:05:47,040 --> 00:05:48,539
处理VGA会更容易。

90
00:05:48,539 --> 00:05:52,520
所以我决定砍掉EGA和SVGA。
（AB钙大刀部再度发功 ）

91
00:05:52,520 --> 00:05:57,490
基本上就留下这3个显卡支持，我认为这会覆盖99%的

92
00:05:57,490 --> 00:05:59,949
现在仍在使用的机器。

93
00:05:59,949 --> 00:06:03,582
然后因为VGA向下兼容CGA和EGA，我一直喜欢做的一件事就是
（屏幕下方□○△既视感）

94
00:06:03,582 --> 00:06:07,160
在所有3种视频模式下测试每一款新游戏。
（屏幕下方□○△既视感）

95
00:06:07,160 --> 00:06:10,610
那么这就是LHX在CGA模式下的显示效果。

96
00:06:10,610 --> 00:06:15,290
除了让我看看其他显卡的能力外，至少它能

97
00:06:15,290 --> 00:06:19,220
让我更好地欣赏自己的显卡。

98
00:06:19,220 --> 00:06:25,280
无论如何，这已经成为我的一个仪式化操作，
也就是在不同的视频模式下尝试每款游戏，

99
00:06:25,280 --> 00:06:28,170
所以我想确保大家会用Planet X3来做同样的事情。

100
00:06:28,170 --> 00:06:34,129
事实上，我很迫切做的一件事是支持很少使用的CGA复合模式。

101
00:06:34,129 --> 00:06:38,120
我其实在之前就做过一个讲这件事的视频，如果你没看过的话，

102
00:06:38,120 --> 00:06:39,990
现在可以把它补上了。

103
00:06:39,990 --> 00:06:44,590
在图形模式下CGA显卡只能同时显示4种颜色，

104
00:06:44,590 --> 00:06:47,370
而大多数游戏使用默认的洋红调色板，

105
00:06:47,370 --> 00:06:50,770
虽然说颜色真难看，但是它实际上可能是最好的调色板。

106
00:06:50,770 --> 00:06:56,540
但是当CGA显卡接的是一个复合视频输出的显示器，
它就能显示16种颜色，甚至

107
00:06:56,540 --> 00:06:58,310
通过一切奇淫技巧，还能显示更多的颜色。

108
00:06:58,310 --> 00:07:02,690
当我仔细研究它时，发现代码编起来挺简单，
所以我决定Planet X3

109
00:07:02,690 --> 00:07:03,770
应该支持这个显示模式。

110
00:07:03,770 --> 00:07:08,120
所以在最后我打算让游戏支持这4种显示模式。

111
00:07:08,120 --> 00:07:09,580
（选择一个编程语言）

112
00:07:09,580 --> 00:07:15,229
口恩，现在我已经钦定了我要支持的电脑平台，我接下来要选

113
00:07:15,229 --> 00:07:17,362
一个编程语言和一个编译器。

114
00:07:17,362 --> 00:07:20,240
其实我根本不知道该怎么开始，所以我问了许多很懂

115
00:07:20,240 --> 00:07:24,300
在MS-DOS编程的大佬然后我发现实际上有3种语言

116
00:07:24,300 --> 00:07:27,289
可供选择，就是C、Pascal和汇编语言。

117
00:07:27,289 --> 00:07:31,199
然后我已经知道了这3种语言该怎么编程（这才是真大佬），

118
00:07:31,199 --> 00:07:34,490
虽然公认的是，汇编语言从一个处理器到下一个彼此之间都不一样。

119
00:07:34,490 --> 00:07:38,390
所以我对8086汇编器不是特别熟悉，

120
00:07:38,390 --> 00:07:40,580
但是，我会努力学习。

121
00:07:40,580 --> 00:07:46,590
我有一本我的朋友给我的这本书在90年代，对我来说是好事。

122
00:07:46,590 --> 00:07:49,470
这实际上是Intel 8086程序猿参考指南。

123
00:07:49,470 --> 00:07:53,949
它实际上讲了处理器的工作原理和每个汇编命令的一切，

124
00:07:53,949 --> 00:07:58,830
然后我发现8086的编程与我以前编程的6502有很大的不同。

125
00:07:58,830 --> 00:08:03,790
即便如此我花了很多个星期调教不同的编程语言和编译器

126
00:08:03,790 --> 00:08:06,720
直到我决定使用汇编语言。

127
00:08:06,720 --> 00:08:10,020
然后你懂，不少人很害怕汇编语言，就像是一类脏话一样，

128
00:08:10,020 --> 00:08:15,340
或者某种极难还很神秘的语言，
 但是一旦你开始使用它，你就会发现它实际上并不那么难，

129
00:08:15,340 --> 00:08:17,889
而且你会逐渐学习如何使用它。

130
00:08:17,889 --> 00:08:20,550
你知道，很滑稽的事情是，我数不清到底有多少次我被

131
00:08:20,550 --> 00:08:26,189
询问我是不是用BASIC来编写C64上的Planet X2。

132
00:08:26,189 --> 00:08:28,470
答案当然是“不，我没有”，

133
00:08:28,470 --> 00:08:29,830
它使用的是汇编语言编写的，

134
00:08:29,830 --> 00:08:33,490
这些旧机器没办法使用BASIC写任何东西。

135
00:08:33,490 --> 00:08:38,289
事实上，对于20世纪80年代初制造的机器，甚至

136
00:08:38,289 --> 00:08:43,870
到了80年代中期，选用的都是汇编语言。

137
00:08:43,870 --> 00:08:50,720
从1987年以前发行的任何商业游戏都是用汇编编写的。

138
00:08:50,720 --> 00:08:52,490
我的意思是，其它的编程语言运行起来都不够快。

139
00:08:52,490 --> 00:08:56,790
所以用汇编写游戏其实不是一件什么从来没听说过或者不寻常的事情。

140
00:08:56,790 --> 00:09:01,700
实际上我其实在做如果是在那个时候我会做的事。

141
00:09:01,700 --> 00:09:04,450
（第一件事是制作一个图像块编辑器）

142
00:09:04,450 --> 00:09:09,860
当我写C64版的时候，我不得不先开发一些工具，如这个图像块编辑器，

143
00:09:09,860 --> 00:09:13,709
然后是地图编辑器，在我可以正式开坑写游戏之前。

144
00:09:13,709 --> 00:09:17,390
这其实不例外，因为我完全是从一个全新的平台开始。

145
00:09:17,390 --> 00:09:21,330
所以因为一些原因我决定先开发图像块编辑器。

146
00:09:21,330 --> 00:09:25,959
首先，最重要的是，在开始制作游戏引擎之前，
我必须先制作一些图像块；

147
00:09:25,959 --> 00:09:30,820
第二，先在这样一个小型项目上的工作会

148
00:09:30,820 --> 00:09:32,760
让我在这个平台上编程更加舒适，

149
00:09:32,760 --> 00:09:37,110
在我开始开坑实际的游戏之前，它给了我一点点经验。

150
00:09:37,110 --> 00:09:39,350
所以现在让我展示一下图像块编辑器是什么样子的。

151
00:09:39,350 --> 00:09:43,310
这是CGA版图像块编辑器，是我最先写出来的。

152
00:09:43,310 --> 00:09:48,540
所以它的作用是你可以四处移动，
像这样绘制像素，当然也可以改变颜色，

153
00:09:48,540 --> 00:09:53,200
我甚至还添加了一些很有用的命令，
例如可以在任何方向上移动整个图块。

154
00:09:53,200 --> 00:09:55,110
当然，这都是通过键盘操作，

155
00:09:55,110 --> 00:09:57,730
我现在还没想该怎么支持鼠标。

156
00:09:57,730 --> 00:10:01,880
我还加了一个填充命令，这样就可以在整个图像块上填充某个颜色。

157
00:10:01,880 --> 00:10:05,430
现在如果我按下了Tab键，它会把我带到图像块数据库，

158
00:10:05,430 --> 00:10:08,380
我可以加载任何一个图像块然后编辑它们。

159
00:10:08,380 --> 00:10:12,350
在顶上我加了一个小功能帮助我看在不同的图像块之间

160
00:10:12,350 --> 00:10:13,350
是什么样子的。

161
00:10:13,350 --> 00:10:17,570
所以举个栗子，如果我想看草丛
在植物旁边是什么样子，这么做就行了。

162
00:10:17,570 --> 00:10:23,290
然后我有256个图像块需要处理，这比在C64版的

163
00:10:23,290 --> 00:10:26,170
48个要多得多。

164
00:10:26,170 --> 00:10:30,700
这个程序还允许我给图像块命名以及某些属性

165
00:10:30,700 --> 00:10:33,940
例如你可以驾驶它、建造它、或者什么的。

166
00:10:33,940 --> 00:10:37,220
所有这些作品都是暂时的。

167
00:10:37,220 --> 00:10:42,490
这些大部分都是由我以及Anders Jensen绘制的，只是为了用用这个工具。

168
00:10:42,490 --> 00:10:45,110
现在让我展示一下CGA复合视频的版本。

169
00:10:45,110 --> 00:10:51,230
90%的代码都是一样的但是我改动的足够这个模式使用了。

170
00:10:51,230 --> 00:10:52,930
你可以看到调色板的颜色更加丰富，

171
00:10:52,930 --> 00:10:56,000
但是所有的图像块都是两倍宽度了。

172
00:10:56,000 --> 00:11:00,410
这是对这种模式的妥协，你会得到更多的颜色，
但是屏幕分辨率会降低。

173
00:11:00,410 --> 00:11:04,290
即便如此我觉得我的作品非常好然后我很确定这个模式

174
00:11:04,290 --> 00:11:08,860
对于CGA用户而言会更有趣，相对那个标准的洋红色4色模式。

175
00:11:08,860 --> 00:11:14,860
请记住，每个图像块都必须从头开始重新绘制，以适应这种模式。

176
00:11:14,860 --> 00:11:16,960
然后现在我向你展示地图编辑器。

177
00:11:16,960 --> 00:11:21,470
这是CGA复合视频版，但是我在这里绘制的地图会在所有版本

178
00:11:21,470 --> 00:11:23,680
里使用因为它不受图像模式的影响。

179
00:11:23,680 --> 00:11:25,620
开始运行时这里就是个垃圾堆，

180
00:11:25,620 --> 00:11:28,320
所以让我给它写个名字好进行编辑。

181
00:11:28,320 --> 00:11:32,440
口恩，这是目前游戏中唯一的地图，

182
00:11:32,440 --> 00:11:34,709
然后在这个时候这只是个实验地图，

183
00:11:34,709 --> 00:11:37,019
但是你可以看到我们已经设计了一些建筑。

184
00:11:37,019 --> 00:11:40,230
顺便说一下，其中一些可能会在某个时候会被重新绘制，

185
00:11:40,230 --> 00:11:42,200
但是目前来看它们足够好。

186
00:11:42,200 --> 00:11:46,910
这里是一个矿场，是从C64版里扒过来重新制作的。

187
00:11:46,910 --> 00:11:49,970
这是一条河，中间有一座桥。

188
00:11:49,970 --> 00:11:52,699
然后当然了，这是外星人基地。

189
00:11:52,699 --> 00:11:56,790
而这个地图编辑器的工作方式是我可以通过按回车然后在这里滚动

190
00:11:56,790 --> 00:12:00,540
并选择一个图像块，然后把它放在这个屏幕上我想的任何一个地方，

191
00:12:00,540 --> 00:12:01,540
jìu zhè mè jiǎn dān.
就  是   一   把    梭。

192
00:12:01,540 --> 00:12:05,639

我添加了一些额外的指令帮助我在特定的事情上加快速度，例如放置

193
00:12:05,639 --> 00:12:07,620
例如这些建筑这样的多图像块物体。

194
00:12:07,620 --> 00:12:11,149
好，你准备好看看实际的游戏了吗？

195
00:12:11,149 --> 00:12:14,940
开始的时候会给你选项让你从4个图形模式里选择一种。

196
00:12:14,940 --> 00:12:19,639
其实这真的就只是3种不同的模式，
复合视频反色（选项3）其实和上面的

197
00:12:19,639 --> 00:12:25,140
选项一模一样，但是颜色进行了反色处理因为
一些CGA机器在复合视频下使用完全不同的色调。

198
00:12:25,140 --> 00:12:30,310
我暂时在VGA上还啥都没写，但是它最后会添加到这个列表里。

199
00:12:30,310 --> 00:12:34,370
无论如何，我就选择选项1：标准CGA了。

200
00:12:34,370 --> 00:12:37,279
你应该会发现这看起来有些不同。

201
00:12:37,279 --> 00:12:41,180
这是因为我使用的是不同的图像块集，是我今天刚刚从

202
00:12:41,180 --> 00:12:43,540
我聘请的像素艺术家那里获得的，绘制了一些更好的图形，

203
00:12:43,540 --> 00:12:45,320
我之后会说明这个。

204
00:12:45,320 --> 00:12:47,110
这是我目前驾驶的坦克。

205
00:12:47,110 --> 00:12:50,780
你可能会注意到我使用的是和康懋达版完全不一样的屏幕布局，

206
00:12:50,780 --> 00:12:53,250
但是操控多多少少和C64版是一样的。

207
00:12:53,250 --> 00:12:57,449
所以我现在可以敲回车来打开选项然后我可以选择一个不同的单位。

208
00:12:57,449 --> 00:13:01,300
这是个飞行单位，所以它可以去往任何地方。

209
00:13:01,300 --> 00:13:03,709
顺带手说一句，目前来讲还没有音效。

210
00:13:03,709 --> 00:13:05,950
这些是一些敌方建筑。

211
00:13:05,950 --> 00:13:11,149
事实上，我还没想好最终版本会不会有飞行单位，

212
00:13:11,149 --> 00:13:12,700
在以后的视频里我会说清楚。

213
00:13:12,700 --> 00:13:14,990
所以现在来看看我的基地。

214
00:13:14,990 --> 00:13:19,570
当然，由于目前还没有实际的代码来处理建筑物，
因此这些实际上仅仅只是

215
00:13:19,570 --> 00:13:20,680
图像块而已。

216
00:13:20,680 --> 00:13:24,990
但是这些在这里只是为了给一个这些东西该是什么样的想法。

217
00:13:24,990 --> 00:13:31,209
这些是太阳能电池板，他们必须得连接到像这个一样的中央电厂。

218
00:13:31,209 --> 00:13:34,550
这是工厂，然后这个是导弹发射架，

219
00:13:34,550 --> 00:13:36,440
这个是雷达站，

220
00:13:36,440 --> 00:13:39,260
在这里是一个炼油厂。

221
00:13:39,260 --> 00:13:42,450
虽然这通常不会在你的基地的中间。

222
00:13:42,450 --> 00:13:45,300
然后我会向你展示它实际该在哪儿。

223
00:13:45,300 --> 00:13:49,820
所以这里有一些熔岩，附近有一些甲烷通风口，这就是

224
00:13:49,820 --> 00:13:51,259
炼油厂该呆的地方。

225
00:13:51,259 --> 00:13:54,930
让我向你展示其他的一些有趣的功能。

226
00:13:54,930 --> 00:13:57,740
如果需要，你可以更改CGA的调色板。

227
00:13:57,740 --> 00:14:01,280
除了一些人可能更喜欢看这些颜色而不是洋红色之外，

228
00:14:01,280 --> 00:14:03,279
它其实没啥好处，

229
00:14:03,279 --> 00:14:04,980
除此之外什么都是一样的。

230
00:14:04,980 --> 00:14:07,529
另一个功能是缩小屏幕宽度模式。

231
00:14:07,529 --> 00:14:11,120
这个是给较慢的机器准备的，我会在之后说明。

232
00:14:11,120 --> 00:14:15,380
但实际上，除了屏幕尺寸更小以外其他所有的功能都是一样的，

233
00:14:15,380 --> 00:14:18,209
实际上这更类似于C64版。

234
00:14:18,209 --> 00:14:22,810
好，现在让我展示一下CGA复合视频模式下是什么样的。

235
00:14:22,810 --> 00:14:27,040
所以，我们又使用了完全不一样的图像块搭配这个模式。

236
00:14:27,040 --> 00:14:30,611
我希望所有的模式彼此看起来都更加类似，但是

237
00:14:30,611 --> 00:14:33,380
我们仍然在搞清楚物体应该是什么样，

238
00:14:33,380 --> 00:14:36,690
但是游戏引擎和地图其实是一模一样的。

239
00:14:36,690 --> 00:14:39,220
所以让我们回去看一下我的建筑。

240
00:14:39,220 --> 00:14:41,520
所以这看起来有点不同了，

241
00:14:41,520 --> 00:14:46,060
雷达站看起来就像是更新过，为了看起来和标准CGA模式下更像一点。

242
00:14:46,060 --> 00:14:49,759
但无论如何，这种模式非常干净，
这让我感到惊讶是因为这用的资源并不多

243
00:14:49,759 --> 00:14:54,800
相对于80年代的机器，因为这种模式提供的彩色图形的能力

244
00:14:54,800 --> 00:14:57,160
与C64或Apple II等机器很相似，

245
00:14:57,160 --> 00:14:59,860
这当然会带来更好的游戏体验。

246
00:14:59,860 --> 00:15:04,120
事实上，我很难相信这是CGA下的图形，因为我一生中

247
00:15:04,120 --> 00:15:07,110
大部分时间都认为CGA只能显示4种颜色。

248
00:15:07,110 --> 00:15:12,810
顺便说一下，这里有一个小船，你最终可以控制它。

249
00:15:12,810 --> 00:15:17,040
然后我要向你展示Tandy图形模式，
为了这个我得先展示一台Tandy 1000实体机。

250
00:15:17,040 --> 00:15:20,880
这是我现在正在做的大部分实机硬件测试的机器。

251
00:15:20,880 --> 00:15:25,230
我喜欢HX版是因为它有一个3.5英寸软驱，这让我

252
00:15:25,230 --> 00:15:26,880

复制游戏变得很简单。

253
00:15:26,880 --> 00:15:31,271
但是这是我唯一一台拥有两种软驱的机器，所以我还可以

254
00:15:31,271 --> 00:15:35,410
使用它作为中间平台来把游戏复制到5.25英寸软盘，

255
00:15:35,410 --> 00:15:37,740
这样我就可以在其他机器上测试了。

256
00:15:37,740 --> 00:15:40,040
好，让我们打开游戏。

257
00:15:40,040 --> 00:15:44,220
我将要展示游戏在真正的Tandy图像模式下是什么样的。

258
00:15:44,220 --> 00:15:47,660
这其实用的是Tandy的低清16色模式，

259
00:15:47,660 --> 00:15:50,519
为什么我没有用高清模式的原因有两个。

260
00:15:50,519 --> 00:15:54,610
主要原因是高清模式下把数据复制到屏幕上需要两倍的数据，这机器

261
00:15:54,610 --> 00:15:55,829
然而不够快。

262
00:15:55,829 --> 00:16:01,370
事实上，直到几天前，在这种模式下还仍然达不到全速运行，

263
00:16:01,370 --> 00:16:05,220
这就是为什么这个缩小屏幕宽度模式存在的原因。

264
00:16:05,220 --> 00:16:09,529
在这个模式，需要更新的显存只有一半，所以这应该是唯一的方式

265
00:16:09,529 --> 00:16:11,810
让这个游戏在这台电脑上流畅运行。

266
00:16:11,810 --> 00:16:15,490
然而我一哥们儿Jim Leonard看了一下我的屏幕绘图程序，然后

267
00:16:15,490 --> 00:16:20,079
给了我一些通过使用我不熟悉的一些汇编命令来提高效率的一些技巧，

268
00:16:20,079 --> 00:16:23,140
然后现在它在全屏下就可以流畅运行了，

269
00:16:23,140 --> 00:16:24,140
甚至更好。

270
00:16:24,140 --> 00:16:29,320
用这台机器我可以调用低速模式然后CPU就会运行在4.77MHz

271
00:16:29,320 --> 00:16:32,480
就像是最原始的IBM PC然后我就可以使用它来测试了。

272
00:16:32,480 --> 00:16:36,850
信不信由你，在这个CPU速度下游戏运行十分完美，

273
00:16:36,850 --> 00:16:41,130
这是个大好消息因为其代表即便是最慢的MS-DOS电脑也可以

274
00:16:41,130 --> 00:16:44,050
以全速在全屏模式下运行游戏。

275
00:16:44,050 --> 00:16:47,949
但是，我仍然打算保留缩小屏幕宽度模式，因为

276
00:16:47,949 --> 00:16:52,639
当我编辑VGA图形模式时会需要更多的CPU功率然后如果你

277
00:16:52,639 --> 00:16:56,940
有一台较慢的XT级别的电脑搭配VGA显卡，你仍然需要

278
00:16:56,940 --> 00:16:58,570
减小屏幕宽度。

279
00:16:58,570 --> 00:17:02,530
哦，然后第二个我使用低清Tandy图形模式的原因是它允许

280
00:17:02,530 --> 00:17:08,720
我使用大部分和CGA复合视频模式相同的代码和美工，
这让我省下很多时间。

281
00:17:08,720 --> 00:17:11,250
当然，我还有很长的路要走。

282
00:17:11,250 --> 00:17:14,350
到目前为止，我所做的一切都集中在图形程序上。

283
00:17:14,350 --> 00:17:19,010
我甚至没有触及后台程序，这将是这个游戏的重要组成部分，

284
00:17:19,010 --> 00:17:25,140
然后声音部分我还没折腾，甚至VGA图形模式我还没弄呢。

285
00:17:25,140 --> 00:17:28,710
事实上，所有的美工本身仍然处于初级阶段，

286
00:17:28,710 --> 00:17:32,970
我想当Part 2出来的时候，你可以看到在美工上会有很多变化。

287
00:17:32,970 --> 00:17:36,870
哦，所以在谈到美工的时候，我想提到的是我雇佣了一位像素艺术家。

288
00:17:36,870 --> 00:17:42,030
他来自法国，名字是Renaud Heidt，我会在评论里写个地址

289
00:17:42,030 --> 00:17:44,630
展示他的作品，如果你感兴趣的话。

290
00:17:44,630 --> 00:17:50,520
在发布Planet X2之后我收到了很多的艺术作品，
但是他的作品给我留下了深刻的印象。

291
00:17:50,520 --> 00:17:53,770
事实上，这里有一些故事情节的开头部分。

292
00:17:53,770 --> 00:17:57,420
所以我打算使用这段小剧情，它会在不同

293
00:17:57,420 --> 00:18:00,560
等级之间出现，搭配文字和音乐来告诉你到底发生了什么，

294
00:18:00,560 --> 00:18:03,000
所以这是他所做的CGA模式的场景之一，

295
00:18:03,000 --> 00:18:05,110
然后我觉得它们真的棒极了。

296
00:18:05,110 --> 00:18:09,710
这是另外一个场景，绘制了Protoid金字塔基地，有些飞船正在飞越。

297
00:18:09,710 --> 00:18:15,160
这是在CGA复合模式下完成的相同场景，这看起来和Tandy模式下

298
00:18:15,160 --> 00:18:16,170
是一模一样的。

299
00:18:16,170 --> 00:18:20,780
然后这些是一些艺术作品，在256色VGA模式下，
（字幕菌表示这个真的太漂亮了）

300
00:18:20,780 --> 00:18:24,730
这是目前游戏中唯一存在的VGA图形，

301
00:18:24,730 --> 00:18:28,770
但是我在此保证在最后会有VGA图像模式。

302
00:18:28,770 --> 00:18:32,490
所以我打算为这个游戏进行一次众筹，

303
00:18:32,490 --> 00:18:33,830
不过我目前还没开始，

304
00:18:33,830 --> 00:18:38,230
我打算在Part 2发布的时候开始，

305
00:18:38,230 --> 00:18:40,490
这应该就是我开始众筹的时候了。

306
00:18:40,490 --> 00:18:44,750
而且我打算这么做的原因是Planet X2我只订了500个包装，

307
00:18:44,750 --> 00:18:48,750
因为我不知道最后销量有多少，而且我害怕的是最后

308
00:18:48,750 --> 00:18:51,400
会有几百份游戏积压然后我卖不出去。

309
00:18:51,400 --> 00:18:54,430
然后真相是我最后把它们都卖光了，库存不够，

310
00:18:54,430 --> 00:18:57,590
然后人们不断对我狂轰滥炸问我什么时候才能补货。

311
00:18:57,590 --> 00:19:02,920
那么，这是一个棘手的问题，
因为这些制作箱子的公司大多数都需要500箱的最低订单，

312
00:19:02,920 --> 00:19:07,250
所以我没办法只订50份或者别的。

313
00:19:07,250 --> 00:19:12,500
然后我想如果我能更好地了解需求，所有的材料我都能订购

314
00:19:12,500 --> 00:19:15,370
正确的数量，然后在发布的时候就能做好上市的准备，

315
00:19:15,370 --> 00:19:19,230
所以我就想众筹是一个不错的主意。

316
00:19:19,230 --> 00:19:22,290
无论如何，Part 1就到这里了。

317
00:19:22,290 --> 00:19:25,880
当Part 2发布的时候，我希望在这一点上看起来更有趣。

318
00:19:25,880 --> 00:19:30,100
所以记得关注，下一集我们将返回讲一些复古的东西，

319
00:19:30,100 --> 00:19:32,100
然后感谢收看。

320
00:19:33,000 --> 00:19:43,000
喜欢本视频请考虑在Patreon和YouTube支持一下原作者
喜欢本字幕和字幕菌请关注Bilibili账户WoodEar85
翻译：WoodEar85 感谢大家收看

