1
00:00:12,200 --> 00:00:16,940
几个月之前我做了这个 PE6502 的评测

2
00:00:16,940 --> 00:00:19,460
它是 Apple I 的克隆且内置了 BASIC

3
00:00:19,460 --> 00:00:23,380
然而它对我来讲各种施展不开，玩起来很不爽

4
00:00:23,380 --> 00:00:28,590
然而我收到很多电子邮件向我介绍一款叫做 Maximite 或是 Color Maximite 的产品

5
00:00:28,590 --> 00:00:30,720
我决定去看看

6
00:00:30,980 --> 00:00:34,620
实际上 Maximite 并不是一种特殊的电脑

7
00:00:34,620 --> 00:00:39,540
毕竟它使用到了基于 PIC-32 单片机的架构

8
00:00:39,540 --> 00:00:44,220
但是固件是写进单片机里来实现运作的

9
00:00:44,400 --> 00:00:47,960
你不能买到特定型号的 Maximite 电脑

10
00:00:47,960 --> 00:00:51,360
最后我就买了 CGColorMax 2

11
00:00:51,360 --> 00:00:55,000
基本上就是一样的东西，但是这是原型板

12
00:00:55,000 --> 00:00:58,060
57 刀且已经组装好了

13
00:00:58,060 --> 00:01:00,410
就是这个了

14
00:01:00,410 --> 00:01:04,280
这个看起来比一般的 Maxmiite 电脑要大

15
00:01:04,280 --> 00:01:10,020
但我买这款的原因是它是最便宜的带 VGA 接口的型号

16
00:01:10,020 --> 00:01:16,120
这个电脑的核心就是这块 PIC32 单片机，一应俱全

17
00:01:16,300 --> 00:01:24,900
后面有一个 PS/2 键盘接口，一个标准 VGA 接口
和一个 Mini USB 接口

18
00:01:24,900 --> 00:01:31,000
这里有个贴片焊盘可以加装一个电源插座，如果不想用 USB 供电的话

19
00:01:31,500 --> 00:01:36,880
这一大块洞洞板的位置就是给你焊接各种想控制的芯片的

20
00:01:37,340 --> 00:01:40,280
这个插槽是插标准尺寸 SD 卡的

21
00:01:40,280 --> 00:01:42,860
我得说明操作不要求如此

22
00:01:42,860 --> 00:01:45,060
一切你想要的都有内置

23
00:01:45,060 --> 00:01:52,180
它还预留了 RS232、RS485 甚至 CAN Bus 的接口

24
00:01:52,180 --> 00:01:54,119
我们来试试看吧

25
00:01:54,120 --> 00:01:56,760
我就来用这个廉价的老 VGA 显示器

26
00:01:56,760 --> 00:02:00,360
我还用了和上次 PE6502 同款的 PS/2 键盘

27
00:02:00,360 --> 00:02:03,120
就像这样怼上

28
00:02:03,680 --> 00:02:07,300
供电的话我就用这个标准的手机充电器和数据线

29
00:02:07,300 --> 00:02:09,060
我们来看看它能干什么

30
00:02:10,680 --> 00:02:12,540
首先看到的是这个 LOGO 画面

31
00:02:13,040 --> 00:02:17,620
让我惊讶的是它从 2011 年到 2013 年就开始研发了

32
00:02:17,629 --> 00:02:19,720
所以它并不新

33
00:02:19,720 --> 00:02:23,100
看起来我还需要了解如何修改这个时钟

34
00:02:23,360 --> 00:02:25,239
除此之外马上就可以用了

35
00:02:25,240 --> 00:02:27,980
这就是 BASIC，就像 80 年代的电脑一样

36
00:02:27,980 --> 00:02:30,720
你要是愿意的话你也可以这么玩

37
00:02:30,720 --> 00:02:35,439
我还是会像很多人那样玩死循环

38
00:02:35,440 --> 00:02:38,640
不过来试试别的，包括图形的

39
00:02:38,640 --> 00:02:42,160
我就做了个小程序让屏幕显示随机彩色线

40
00:02:42,160 --> 00:02:47,580
我小时候就为这样的几乎每个带 BASIC 的电脑写这个程序

41
00:02:47,640 --> 00:02:52,740
在展示之前先给你看看同样的程序在 C128 上是什么效果

42
00:02:52,880 --> 00:02:57,500
在 Commodore BASIC 上代码有点不太一样，因此程序也不太一样

43
00:02:57,640 --> 00:02:59,260
但是效果一样

44
00:02:59,320 --> 00:03:02,940
如你所见，就是在屏幕上以随机位置绘制随机颜色直线

45
00:03:02,940 --> 00:03:03,940
没什么特别的

46
00:03:03,940 --> 00:03:07,280
小时候我就觉得特别酷

47
00:03:07,280 --> 00:03:12,340
如果等的时间足够长，全屏都会被随机线填满

48
00:03:12,340 --> 00:03:14,760
在这个电脑上 BASIC 是一个中介语言

49
00:03:14,760 --> 00:03:17,740
也就意味着每一段程序和代码都要被分析和运行

50
00:03:18,020 --> 00:03:22,480
它比机器语言效率慢得多，而当你在 1MHz 的电脑上运行 BASIC 时

51
00:03:22,480 --> 00:03:25,519
这就是预期的运行速度了

52
00:03:25,519 --> 00:03:29,409
需要将近一分钟的时间将全屏用线条填满

53
00:03:29,409 --> 00:03:34,800
现在回到 Color Maximite 上运行基本一样的程序

54
00:03:35,000 --> 00:03:37,799
我们来看看填满屏幕要多久

55
00:03:37,800 --> 00:03:40,700
如你所见，这要不了多久

56
00:03:40,700 --> 00:03:42,700
即便是中介处理后的 BASIC

57
00:03:42,700 --> 00:03:46,800
PIC32 单片机的运行速度是老 Commodore 电脑的几百倍

58
00:03:47,720 --> 00:03:50,340
当初我在做 PE6502 这一期的时候

59
00:03:50,340 --> 00:03:55,580
我提到的一点就是尝试花几个小时去在上面写一个俄罗斯方块

60
00:03:55,580 --> 00:03:59,040
然而因为图形处理器机能受限，我办不到

61
00:03:59,040 --> 00:04:02,569
油管的这个视频评论里，有很多人嘲笑我

62
00:04:02,569 --> 00:04:07,859
说我太高估自己了，因为承诺了能在几个小时内写一个俄罗斯方块出来

63
00:04:07,860 --> 00:04:10,800
事实是我还真的能写出来

64
00:04:10,800 --> 00:04:17,340
在 2014 年我为了自我挑战写了一个 C64 的俄罗斯方块

65
00:04:17,340 --> 00:04:21,100
实际上我花了几个小时就写出了可玩的版本

66
00:04:21,100 --> 00:04:23,360
问题是玩起来太慢了

67
00:04:23,360 --> 00:04:30,300
于是我又花了 10 个小时优化代码提高运行效率
这样玩起来就够快了

68
00:04:30,300 --> 00:04:34,520
我就对在 Maximite 上能否写一个高效率的俄罗斯方块心里仍然没底

69
00:04:34,520 --> 00:04:37,400
我是说……考虑到它的运行速度有多快

70
00:04:38,060 --> 00:04:42,540
我也趁这次机会给你看看另一种在这个电脑上编程的方法

71
00:04:42,780 --> 00:04:45,940
不需要输入行数，只需要使用 edit 命令

72
00:04:45,940 --> 00:04:48,600
这样就可以调用一个全屏文本编辑器

73
00:04:48,610 --> 00:04:50,680
这就是我写的俄罗斯方块的程序

74
00:04:50,680 --> 00:04:54,100
你注意到的就是没有标行数

75
00:04:54,100 --> 00:04:56,640
因为这种版本的 BASIC 上并不需要

76
00:04:56,640 --> 00:05:01,080
你只需要使用标签，这样就更易记

77
00:05:01,080 --> 00:05:04,900
你也可以用这种缩进，这样代码看起来更具层次

78
00:05:04,900 --> 00:05:06,980
也就更像是在现代的电脑编码一样

79
00:05:07,900 --> 00:05:09,720
我们来运行一下这个代码

80
00:05:10,320 --> 00:05:11,580
就是这样了

81
00:05:11,780 --> 00:05:15,100
不管你信不信，我花了 4 个小时时间完成

82
00:05:15,100 --> 00:05:18,600
说实话前面三个小时我都用在对比

83
00:05:18,600 --> 00:05:22,380
这个 BASIC 和 Commodore BASIC 语法区别上了

84
00:05:22,840 --> 00:05:25,380
每个版本的 BASIC 都在命令上有着区别

85
00:05:25,380 --> 00:05:28,960
以及如何完成应做的事，而这个版本也不例外

86
00:05:29,580 --> 00:05:33,500
我需要告诉你，这个俄罗斯方块是运行在图形化模式下的

87
00:05:33,620 --> 00:05:36,660
这些方块实际上都是用描线命令画的

88
00:05:37,320 --> 00:05:40,640
如果用这种方式在 Commodore BASIC 上写的话

89
00:05:40,640 --> 00:05:47,200
那样方块掉落速度会慢到按住按钮都至少 10 秒一层

90
00:05:47,220 --> 00:05:49,960
不过这个很快，也很流畅

91
00:05:49,960 --> 00:05:55,780
同时也有像 Blitter 这样的命令调用精灵提高运行速度

92
00:05:55,780 --> 00:05:57,900
这里我甚至都没用上

93
00:05:58,620 --> 00:06:00,640
这个电脑也应该有声音的

94
00:06:00,640 --> 00:06:04,120
但这要求焊接一个音频接口，我的没有

95
00:06:04,480 --> 00:06:07,700
我也没有要给它添加声音的想法了

96
00:06:08,200 --> 00:06:12,060
我们来说说 Maximite 是如何产生图像信号的

97
00:06:12,060 --> 00:06:18,360
原始的 Maximite 只有单色，可以通过 VGA 或复合视频输出画面

98
00:06:18,380 --> 00:06:21,820
实际上它是靠 CPU 输出视频信号

99
00:06:21,820 --> 00:06:24,620
就想这台 Timex Sinclair 1000

100
00:06:24,840 --> 00:06:30,900
输出单色视频信号只需要通过 CPU 产生高低电平

101
00:06:30,900 --> 00:06:34,360
实现这个对 CPU 要求不高

102
00:06:34,360 --> 00:06:36,660
尤其是在像 Maximite 这么强大的硬件上

103
00:06:36,660 --> 00:06:38,979
不过它是怎么产生颜色的

104
00:06:38,980 --> 00:06:43,920
如果你去看 VGA 接口的话，前三个针脚对应红绿蓝

105
00:06:43,920 --> 00:06:46,540
然后还需要水平和垂直同步

106
00:06:46,540 --> 00:06:48,280
别忘了地线

107
00:06:48,360 --> 00:06:52,320
这是连接一个 VGA 显示器最基本的东西

108
00:06:52,320 --> 00:06:54,980
红绿蓝都是模拟信号

109
00:06:54,980 --> 00:06:58,600
在电脑上会接收到来自这三个引脚的不同电压

110
00:06:58,600 --> 00:07:00,520
从而让三原色以不同亮度显示

111
00:07:00,880 --> 00:07:03,340
但是 Maximite 将这三个引脚作为数字信号出理

112
00:07:03,340 --> 00:07:06,280
意味着只有 0 和 1 两个电平，没有中间状态

113
00:07:06,280 --> 00:07:10,360
这就意味着可以产生纯红色、纯绿色、纯蓝色

114
00:07:10,360 --> 00:07:12,480
以及这些颜色的混合色

115
00:07:12,640 --> 00:07:17,820
这一共就 7 种颜色，再加上黑色就是 8 种

116
00:07:18,060 --> 00:07:20,560
Color Maximite 提供了四种视频模式

117
00:07:20,800 --> 00:07:24,680
模式 1 和原始的单色 Maximite 一样

118
00:07:25,000 --> 00:07:27,820
这两种颜色当然就是黑白咯

119
00:07:28,180 --> 00:07:29,940
显示分辨率很奇特

120
00:07:29,940 --> 00:07:35,780
就我的理解来看，挑选这种分辨率是取决于 PIC32 芯片的时钟

121
00:07:35,780 --> 00:07:39,820
也没几种选择，这就是最好的妥协了

122
00:07:39,820 --> 00:07:44,240
用液晶显示器显示的时候并不是很清晰

123
00:07:44,240 --> 00:07:46,320
因为分辨率很奇怪

124
00:07:46,320 --> 00:07:49,940
如果连接到老式 CRT 显示器上

125
00:07:49,940 --> 00:07:53,980
你就可以看到文字非常清晰，毕竟都是模拟信号

126
00:07:53,980 --> 00:07:56,220
跟分辨率毫无关系

127
00:07:56,740 --> 00:08:01,500
模式 2、3 基本上就是第一种模式的 4 色或 8 色版

128
00:08:01,500 --> 00:08:05,419
模式 4 就最有趣，它主要是为游戏设计的

129
00:08:05,419 --> 00:08:09,759
它给你完整的 8 种颜色，而且还有多余的显存用来放置精灵

130
00:08:09,760 --> 00:08:11,920
同时还能保证运行速度

131
00:08:11,920 --> 00:08:14,500
这就是我的俄罗斯方块游戏使用的模式

132
00:08:14,800 --> 00:08:16,560
你还可以实时改变运行模式

133
00:08:16,569 --> 00:08:19,470
在模式 3 下文字就很小

134
00:08:19,470 --> 00:08:23,360
在模式 4 下文字就像老式 8 位电脑一样大

135
00:08:23,820 --> 00:08:27,880
Maximite 也能通过复合视频信号将画面输出到彩监或电视上

136
00:08:28,120 --> 00:08:31,440
但你应该注意到它并不包括复合视频接口

137
00:08:31,440 --> 00:08:34,480
你就得从 VGA 接口转接

138
00:08:34,490 --> 00:08:36,070
回到这个引线图

139
00:08:36,070 --> 00:08:39,260
如果要转换成复合视频信号，这是你要做的

140
00:08:39,260 --> 00:08:41,860
你不需要绿蓝两色引脚

141
00:08:41,860 --> 00:08:43,840
也不需要垂直同步

142
00:08:43,840 --> 00:08:46,740
红色引脚变成了主要的信号源

143
00:08:46,740 --> 00:08:51,200
而水平同步信号通过一个 680Ω 的电阻连接上去产生复合同步脉冲

144
00:08:51,620 --> 00:08:53,760
地线还是地线

145
00:08:54,120 --> 00:08:58,880
仅仅是这种搭配还不足以将 VGA 信号转换成复合视频

146
00:08:58,880 --> 00:09:02,240
你得告诉 Maximite 电脑改变画面输出方式

147
00:09:02,240 --> 00:09:04,580
改成复合视频信号

148
00:09:04,600 --> 00:09:07,540
这就需要将引脚 ⑨ 接地

149
00:09:08,900 --> 00:09:12,200
我就想自制一个复合视频转接线

150
00:09:12,200 --> 00:09:13,700
我有多余的 VGA 线

151
00:09:13,700 --> 00:09:18,080
我就把一头剪掉，然后我就只需要这部分了

152
00:09:18,420 --> 00:09:22,680
你就可以看到这里有很多导线，我们只需要一小部分

153
00:09:22,680 --> 00:09:25,260
我把万用表打到测通模式

154
00:09:25,260 --> 00:09:28,220
这样就知道哪个导线对应哪个引脚

155
00:09:28,320 --> 00:09:30,480
然而问题来了

156
00:09:30,480 --> 00:09:34,670
我找到了所有要找到的引线，就一个问题

157
00:09:34,670 --> 00:09:38,579
记得我前面说的要让 Maximite 切换到复合模式的引线吗

158
00:09:38,580 --> 00:09:42,600
实际上现在的 VGA 显示器已经不要求这个引线了

159
00:09:42,600 --> 00:09:47,460
而这个剪开的 VGA 线也没有⑨号引脚对应的导线

160
00:09:47,640 --> 00:09:50,920
完全就是浪费时间了……扔掉扔掉

161
00:09:51,300 --> 00:09:55,580
既然不能用优雅的方法的话，我得用不清真的方法了

162
00:09:55,620 --> 00:09:59,840
我没时间整理组件了，直接往对应引脚怼曲别针上去

163
00:10:00,220 --> 00:10:01,820
然后别忘了上鳄鱼夹

164
00:10:02,000 --> 00:10:03,260
这样就好了

165
00:10:03,480 --> 00:10:05,400
简单粗暴的转接

166
00:10:05,410 --> 00:10:08,339
别笑啊，还真能用

167
00:10:08,340 --> 00:10:11,040
我把它接到了我的老 Commodore 显示器上

168
00:10:11,040 --> 00:10:13,080
虽然任何电视也能用

169
00:10:13,580 --> 00:10:17,220
文字异常清晰，毫无怨言

170
00:10:17,580 --> 00:10:21,480
我得说这可比 80 年代的电脑显示清晰太多了

171
00:10:21,720 --> 00:10:24,800
除了是我预料中的单色模式

172
00:10:24,800 --> 00:10:27,180
我注意到分辨率也不一样了

173
00:10:27,500 --> 00:10:30,780
我不确定复合视频模式的分辨率多少

174
00:10:30,780 --> 00:10:32,540
但肯定不一样了

175
00:10:32,920 --> 00:10:36,300
你也注意到当你接上复合视频显示器的时候

176
00:10:36,300 --> 00:10:38,360
显示模式切换命令也没用了

177
00:10:38,370 --> 00:10:42,130
因为只有一种针对复合视频信号的模式

178
00:10:42,130 --> 00:10:43,350
不过也没毛病

179
00:10:43,350 --> 00:10:45,640
我也可以在这个模式下写程序

180
00:10:45,640 --> 00:10:47,860
全屏编辑器在这里就很好用

181
00:10:47,860 --> 00:10:49,910
我来试试我写的俄罗斯方块

182
00:10:50,280 --> 00:10:54,020
游戏运行起来有点不太正常因为分辨率不对

183
00:10:54,020 --> 00:10:58,820
看起来方块都掉进了虚空中

184
00:10:59,360 --> 00:11:03,320
当然，回头编辑下代码也不是什么大不了的事

185
00:11:03,320 --> 00:11:05,840
重新指定方块的高度

186
00:11:05,980 --> 00:11:08,760
让它们短两行像素点就好多了

187
00:11:08,960 --> 00:11:11,120
现在游戏在复合视频信号模式下就好多了

188
00:11:11,760 --> 00:11:16,020
虽然没有之前那么丰富多彩，但仍然不失可玩性

189
00:11:16,380 --> 00:11:18,840
电脑可以在复合视频模式和 VGA 显示器中的多种方式

190
00:11:18,840 --> 00:11:22,460
挑选一个低廉的方式

191
00:11:22,540 --> 00:11:26,380
我想接到我的采集卡上看看效果如何

192
00:11:26,390 --> 00:11:31,050
虽然信号同步没问题，但是奇怪的分辨率

193
00:11:31,050 --> 00:11:32,959
因为某些原因导致画面变得比较模糊

194
00:11:32,960 --> 00:11:34,440
但文字仍然可读

195
00:11:34,440 --> 00:11:41,280
通过一些试验我才知道 NTSC 复合视频模式的分辨率是
304 x 180

196
00:11:41,640 --> 00:11:43,680
也是比较奇怪的分辨率

197
00:11:43,680 --> 00:11:46,820
如果 PAL 模式有出入我并不感到奇怪

198
00:11:46,820 --> 00:11:50,200
到这里我已经给你展示了这台电脑

199
00:11:50,200 --> 00:11:52,100
灵活运用 BASIC 的玩法

200
00:11:52,660 --> 00:11:57,700
不过你得记住这是个单片机，主要用于控制电子元件

201
00:11:57,700 --> 00:12:01,580
你应该注意到这里的几排通用输入输出引脚

202
00:12:01,580 --> 00:12:04,640
它们都可以用来连接东西

203
00:12:04,840 --> 00:12:07,700
为了方便使用，我焊上这排插针

204
00:12:08,180 --> 00:12:11,280
理想状态下你也许想要两倍高度的

205
00:12:11,280 --> 00:12:14,820
但是这是平躺的，这里只是为了方便演示

206
00:12:14,830 --> 00:12:17,470
我把它们焊在这里

207
00:12:17,470 --> 00:12:18,870
然后就好了

208
00:12:18,870 --> 00:12:23,500
直到我看了原理图我才意识到我还没焊接地线

209
00:12:23,500 --> 00:12:27,040
这个地线就在下面那一排没焊接的一个针脚上

210
00:12:27,040 --> 00:12:31,360
我就接地到 VGA 接口上测试

211
00:12:31,360 --> 00:12:33,880
另外一个接到引脚 13 上

212
00:12:34,680 --> 00:12:39,100
你应该注意到我的万用表读数还是零

213
00:12:39,460 --> 00:12:40,920
试试输入几个命令

214
00:12:40,920 --> 00:12:43,720
首先是 setpin 13,8

215
00:12:43,720 --> 00:12:47,560
这就是将引脚 8 改成输出引脚

216
00:12:48,060 --> 00:12:51,260
然后我用这个简单的命令接通引脚 13

217
00:12:51,260 --> 00:12:54,400
我按下回车之后电压就开始变化了

218
00:12:54,940 --> 00:12:57,860
另外你还可以输入引脚 0

219
00:12:57,860 --> 00:13:01,720
并不是一个实际的引脚，而是控制电源 LED

220
00:13:02,240 --> 00:13:06,460
我可以像这样输入 1 重新点亮

221
00:13:07,740 --> 00:13:11,500
通过这些引脚，你可以连接上各种各样的东西

222
00:13:11,500 --> 00:13:19,240
从小液晶屏，温度传感器，伺服……基本上就是能连到 Arduino 上的东西都可以连到这上面

223
00:13:19,780 --> 00:13:21,720
那底线是什么？

224
00:13:21,720 --> 00:13:26,380
我收到很多邮件求推荐老电脑

225
00:13:26,380 --> 00:13:30,420
这样他们就可以出于任何理由学习 BASIC

226
00:13:30,420 --> 00:13:35,120
我一般统统推荐 C64，因为很容易入手
(对于中国，小霸王学习机可能是更好的选择

227
00:13:35,120 --> 00:13:39,320
价格也合适，资料也丰富

228
00:13:39,540 --> 00:13:43,040
说实话还有更好的选择

229
00:13:43,050 --> 00:13:48,640
更便宜，更可靠，还能把程序存进 SD 卡

230
00:13:48,640 --> 00:13:52,180
如果你愿意的话甚至可以从 PC 复制程序

231
00:13:52,180 --> 00:13:55,760
用这个学习 BASIC 更好

232
00:13:55,769 --> 00:13:58,390
作为一个单片机意味着什么？

233
00:13:58,390 --> 00:14:01,040
我几乎没折腾过单片机

234
00:14:01,040 --> 00:14:04,640
主要的原因就是我还得在电脑装个套件

235
00:14:04,940 --> 00:14:10,180
还要学怎么用软件，怎么用特定语言编程

236
00:14:10,200 --> 00:14:12,740
最后还得把代码传进单片机

237
00:14:12,740 --> 00:14:15,700
这样才能知道能不能用
(@Proteus)

238
00:14:15,700 --> 00:14:19,980
这么一来学习用单片机的要求就很高了

239
00:14:19,980 --> 00:14:24,440
Maximite 真正大幅降低了入门的门槛

240
00:14:24,440 --> 00:14:27,360
如果想要更小的，那还有更好的

241
00:14:27,360 --> 00:14:34,820
直接 Maximite 机上编程后复制，做完之后传进这个 Mini Maximite 上

242
00:14:35,140 --> 00:14:36,839
这可是个很棒的辑器

243
00:14:36,839 --> 00:14:38,519
很高兴能有人给我推荐它

244
00:14:38,519 --> 00:14:40,300
之后说不定还用得上呢

245
00:14:40,300 --> 00:14:45,440
不过这一集就到此为止吧，记得关注后续的复古内容

246
00:14:45,440 --> 00:14:46,540
感谢观看

