1
00:00:11,940 --> 00:00:17,640
1971年三月，Intel发布了世界上第一款微处理器

2
00:00:17,800 --> 00:00:19,880
它的名字叫4004

3
00:00:20,260 --> 00:00:25,760
它和后一年发布的8008处理器 则带来了计算机工业的革命

4
00:00:26,080 --> 00:00:29,300
然而 微处理器发明前就没有电脑了吗？

5
00:00:29,580 --> 00:00:32,060
在那之前 也有很多著名的电脑 

6
00:00:32,060 --> 00:00:36,940
比如Digital PDP-8 上世纪60年代在商用领域得到了广泛的应用

7
00:00:37,420 --> 00:00:41,740
而且阿波罗上使用的导航电脑也是在60年代设计的

8
00:00:42,560 --> 00:00:50,900
也别忘了Steve Jobs和Steve Wozniak 用TTL逻辑芯片打造街机游戏主板的故事

9
00:00:51,800 --> 00:00:57,200
而且40年代时 就已经存在基于电子管的计算机了

10
00:00:57,200 --> 00:01:00,200
显然那个时候还没有微处理器

11
00:01:00,860 --> 00:01:05,780
而且其实如果想一想的话 微处理器其实也就是一堆晶体管

12
00:01:05,900 --> 00:01:10,510
通常而言是可以分成很多独立的逻辑单元的

13
00:01:11,680 --> 00:01:17,900
比如说 前几年就有人用三极管复刻了一个完整的6502

14
00:01:17,900 --> 00:01:21,560
并且还加入了很多LED 可以实时显示CPU的状态

15
00:01:21,680 --> 00:01:24,380
他们把它称为MOnSter 6502

16
00:01:25,740 --> 00:01:30,760
今天我要介绍的是Gigatron TTL计算机套件

17
00:01:30,900 --> 00:01:34,400
也是一个和我之前介绍过的类似的DIY计算机套件

18
00:01:34,560 --> 00:01:38,420
不过主要的区别是这个并没有微处理器

19
00:01:39,260 --> 00:01:43,450
一并寄来的还有这个很好看的小盒子 以及一本说明书

20
00:01:43,760 --> 00:01:48,360
不得不说 对于这类的自制项目 这是我目前为止见过的最好的说明书

21
00:01:49,040 --> 00:01:52,320
虽然说里面有很多具体的技术细节

22
00:01:52,700 --> 00:01:58,500
但是其实组装过程非常简单 任何人都应该能够完成组装

23
00:01:59,320 --> 00:02:03,520
所有需要的工具只是一个电烙铁

24
00:02:04,200 --> 00:02:07,840
一些焊锡丝 还有一把剪线钳

25
00:02:08,020 --> 00:02:08,780
就这样

26
00:02:09,320 --> 00:02:13,840
盒子里面首先有一袋小元件

27
00:02:14,080 --> 00:02:18,540
然后是所有的TTL逻辑芯片、RAM芯片和EPROM

28
00:02:19,340 --> 00:02:23,020
这个看起来是一条USB供电线

29
00:02:23,760 --> 00:02:24,920
最后是电路板本体

30
00:02:25,060 --> 00:02:26,860
板子本身还是很好看的

31
00:02:26,860 --> 00:02:31,440
原作者应该是花了一些心思来把这个板子做的尽可能好看的

32
00:02:32,040 --> 00:02:35,500
右下角写着这是一台没有微处理器的电脑

33
00:02:35,500 --> 00:02:37,500
以及主要的参数

34
00:02:37,980 --> 00:02:40,760
我就按照这个组装说明来了

35
00:02:40,760 --> 00:02:44,000
他说我应该先安装40个小电容

36
00:02:44,000 --> 00:02:45,360
那我就照做咯

37
00:04:44,480 --> 00:04:48,000
手册里面对于安装二极管的方法描述有些模糊

38
00:04:48,040 --> 00:04:49,880
我看了好几遍才理解

39
00:04:49,880 --> 00:04:51,360
希望这样是对的

40
00:04:52,520 --> 00:04:55,440
以及手册说了到这个阶段就可以上电测试了

41
00:04:55,440 --> 00:05:01,680
如果可以看见闪烁的LED 说明到目前为止的东西都是正常工作的

42
00:05:02,440 --> 00:05:04,400
所以我觉得我装的应该没有问题

43
00:05:05,560 --> 00:05:07,560
接下来要安装音频输出

44
00:05:08,760 --> 00:05:10,400
以及手柄接口

45
00:05:11,480 --> 00:05:16,080
最后是VGA接口 以及配套的一些接口电路

46
00:05:34,880 --> 00:05:40,040
在几个小时的组装之后 终于可以测试视频输出了

47
00:05:51,440 --> 00:05:53,360
双手合十

48
00:05:53,760 --> 00:05:55,440
一次点亮

49
00:05:56,560 --> 00:06:00,920
最后的组装的话 只是需要在底部装上橡胶垫

50
00:06:01,560 --> 00:06:04,760
以及盒子内部也需要4个橡胶垫

51
00:06:05,000 --> 00:06:07,440
板子就这样放在上面

52
00:06:08,280 --> 00:06:11,480
放进去就可以盖上了

53
00:06:14,120 --> 00:06:16,120
看着真是舒服

54
00:06:16,120 --> 00:06:17,880
来看看这个东西有什么功能吧

55
00:06:19,160 --> 00:06:22,800
首先开机可以看到的是一个菜单 里面有可选的测试程序

56
00:06:22,960 --> 00:06:25,160
我先试试图片好了

57
00:06:25,640 --> 00:06:26,640
还挺有趣

58
00:06:26,640 --> 00:06:29,320
有一个猩猩，不过我并不清楚具体是什么

59
00:06:30,360 --> 00:06:35,840
顺便，Gigatron可以显示64色 因为它每个RGB通道有2位

60
00:06:35,840 --> 00:06:38,800
这个是我在焊接电阻的时候注意到的

61
00:06:38,800 --> 00:06:42,200
虽然分辨率很低 但是颜色还是很好的

62
00:06:43,040 --> 00:06:45,480
我们来稍微讲一讲它的视频输出好了

63
00:06:45,680 --> 00:06:50,240
Gigatron的输出分辨率是160x120像素

64
00:06:50,240 --> 00:06:52,680
也就是低于大部分的8位电脑

65
00:06:52,960 --> 00:06:56,320
但是Gigatron并没有独立的视频处理芯片

66
00:06:56,320 --> 00:06:59,200
他们参考了Sinclair ZX81的做法

67
00:06:59,440 --> 00:07:02,800
所有的视频处理都是用CPU软件完成的

68
00:07:03,240 --> 00:07:06,480
当然可能这里使用CPU这个词不太准确？ （其实还行

69
00:07:06,680 --> 00:07:11,200
考虑到这个机器的CPU速度和VGA时钟速度

70
00:07:11,440 --> 00:07:15,200
160像素是能达到的最佳分辨率

71
00:07:16,120 --> 00:07:20,880
另外如果仔细看的话 屏幕每3行就有1行是黑的 也算是加了一点CRT扫描线的效果

72
00:07:21,080 --> 00:07:27,280
然而其实原因是CPU需要有实现来执行代码

73
00:07:27,280 --> 00:07:30,040
不然所有的算力就都用来产生图像了

74
00:07:30,360 --> 00:07:32,520
不过这个功能是可以关掉的

75
00:07:32,520 --> 00:07:35,360
不过我想先展示一下Mandelbrot demo

76
00:07:35,800 --> 00:07:38,280
这个demo会渲染并显示Mandelbrot图像

77
00:07:38,440 --> 00:07:43,720
感觉上好像应该还挺快 其实完全不是

78
00:07:43,720 --> 00:07:48,560
这时如果按下手柄的SELECT键

79
00:07:48,920 --> 00:07:55,360
它就会切换到完整显示模式 也就会损失一定性能

80
00:07:55,520 --> 00:08:00,960
在这里就能很明显的看到这个功能会对性能造成多大影响

81
00:08:01,720 --> 00:08:06,760
然而即使是在快速模式下，完整绘图也需要大约20分钟

82
00:08:08,200 --> 00:08:11,040
这里还有一些游戏 比如第一个是贪吃蛇

83
00:08:11,800 --> 00:08:15,520
然而我并没有搞清楚这个游戏应该怎么玩

84
00:08:15,520 --> 00:08:19,120
并不知道我是应该去收集还是避开 （我猜是正好碰一次？）

85
00:08:21,720 --> 00:08:24,080
另外一个游戏是赛车

86
00:08:24,160 --> 00:08:27,640
我觉得意义应该就是看你能坚持多少时间不翻车

87
00:08:32,760 --> 00:08:36,120
我还想再来谈一谈Gigatron的编程语言

88
00:08:36,640 --> 00:08:40,720
CPU总共只支持8种指令

89
00:08:40,960 --> 00:08:46,480
顺便 PDP-8的名称由来就是因为它只支持8条指令

90
00:08:47,080 --> 00:08:51,400
即使是6502也有56条不同的指令

91
00:08:51,680 --> 00:08:55,040
而Intel的则是有数百条不同的指令

92
00:08:55,800 --> 00:09:00,279
只用8条指令写代码当然是可行的 不过会很繁琐

93
00:09:00,279 --> 00:09:04,300
所以他们开发了一个虚拟环境

94
00:09:04,300 --> 00:09:09,360
比如说 参考一下80年代计算机的实现

95
00:09:09,400 --> 00:09:11,040
比如苹果或者Commodore 

96
00:09:11,040 --> 00:09:15,910
CPU抽象成为硬件层 只能用机器语言去开发程序

97
00:09:15,910 --> 00:09:20,500
于是他们开发了一个用机器语言编写的BASIC解释器

98
00:09:20,500 --> 00:09:24,800
这样也就允许用户编写更加易用的BASIC程序

99
00:09:25,960 --> 00:09:29,120
Gigatron的做法也很类似

100
00:09:29,120 --> 00:09:30,480
首先是一个CPU作为硬件层

101
00:09:30,480 --> 00:09:35,240
随后是一个用机器语言编写的字节码模拟器

102
00:09:35,320 --> 00:09:40,920
执行的代码语言是GCL，含义为Gigatron Control Language

103
00:09:41,360 --> 00:09:43,680
这个语言依然很接近汇编语言

104
00:09:43,680 --> 00:09:47,280
但是至少它有34条指令 使用起来就方便不少

105
00:09:47,840 --> 00:09:51,360
顺便可以和Steve Wozniak的Sweet 16语言对比一下

106
00:09:51,360 --> 00:09:54,040
CPU执行速度是6.25MHz

107
00:09:54,040 --> 00:10:02,520
但是如果考虑到字节码模拟器的问题 性能应该还是接近80年代的家用机的

108
00:10:02,760 --> 00:10:07,560
虽然Gigatron从概念验证和教育角度来说非常棒

109
00:10:07,560 --> 00:10:11,080
但是还是有一些问题我想指出

110
00:10:11,110 --> 00:10:12,850
首先 这个东西不便宜 （散了散了）

111
00:10:12,850 --> 00:10:15,440
很早之前计算机厂商就知道了

112
00:10:15,440 --> 00:10:20,280
要降低计算机成本的方法是减少芯片数量 而不是增加

113
00:10:20,640 --> 00:10:28,840
这个电脑大概就是走了反路吧 （明明74的都好便宜的）

114
00:10:29,520 --> 00:10:35,360
零售价是160欧元 大约是200美金

115
00:10:35,360 --> 00:10:39,720
当然这个本身倒也还行 但是还有一个问题

116
00:10:39,720 --> 00:10:44,720
一个比较主观的观点 就是

117
00:10:44,720 --> 00:10:49,480
这个电脑一旦组装完了 玩完了内置的软件

118
00:10:49,840 --> 00:10:52,440
就没剩下什么能做的事情了

119
00:10:52,470 --> 00:10:53,470
根本没法玩

120
00:10:53,480 --> 00:10:59,520
这个东西没有键盘 也没法在上面给Gigatron编程

121
00:10:59,840 --> 00:11:04,080
主菜单里面有一个叫loader的东西可以载入新的软件

122
00:11:04,240 --> 00:11:09,550
但是需要Arduino 编程当然也是在现代PC上完成的

123
00:11:09,560 --> 00:11:14,640
我觉得这是一个巨大的缺点 也就少了很多能在上面实验的乐趣

124
00:11:14,960 --> 00:11:17,600
不过这个主要也就是一个软件问题

125
00:11:17,620 --> 00:11:18,620
谁知道呢

126
00:11:18,620 --> 00:11:21,870
他们可以更新固件 加入一些类似命令行的东西

127
00:11:21,870 --> 00:11:25,340
甚至是运行BASIC或者其它的机器语言环境（monitor）一类的东西

128
00:11:25,340 --> 00:11:27,060
那么值不值这个钱呢

129
00:11:27,060 --> 00:11:29,100
我觉得你得自己决定了

130
00:11:29,100 --> 00:11:33,029
对于我来说 我能向大家展示这个东西我很开心

131
00:11:33,029 --> 00:11:35,380
我觉得还是挺有趣的 我也希望大家能觉得有趣

132
00:11:35,380 --> 00:11:40,600
然而我还是希望有人能够帮我打造一台我梦想中的电脑

133
00:11:40,600 --> 00:11:44,470
与其花费时间在这里解释 我会在介绍里面放一个到我网站的链接

134
00:11:44,470 --> 00:11:48,870
介绍我想象中的面向爱好者的电脑应该是什么样的

135
00:11:48,870 --> 00:11:50,660
也许有人会造出来吧 （其实已经有了，叫MEGA65）

136
00:11:50,660 --> 00:11:53,040
那么本期视频大致就是如此

137
00:11:53,040 --> 00:11:54,920
感谢观看

138
00:11:56,280 --> 00:11:58,360
翻译：ZephRay